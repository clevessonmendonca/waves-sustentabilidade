generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id String @id @default(uuid())
  name String
  slug String
  imageUrl String
  products Product[]
}

model Product {
  id String @id @default(uuid())
  name String
  slug String
  description String
  basePrice Decimal @db.Decimal(8, 2)
  imageUrls String[]
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  discountPercentage Int @default(0)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

person Person[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Person {
  id String @id @default(uuid())
  name String
  phone String
  cpfCnpj String
  sex String
  birthDate DateTime
  uf String
  city String
  cep String
  timeInMarket String

  collector Collector[]
  recycler Recycler[]
  
  userId String
  user User @relation(fields: [userId], references: [id])
}

model Recycler {
  id String @id @default(uuid())
  recyclingServiceDescription String
  kgRecycled Int
  socialDonations Boolean
  donationDetails String?

  personId String
  person Person @relation(fields: [personId], references: [id])

  collectionSchedule CollectionSchedule[]
}

model Collector {
  id String @id @default(uuid())
  collectionServiceDescription String
  kgCollected Int
  marketTime String
  organization String
  cpfCnpj String
  isoCertification Boolean
  purchases String
  biography String

  personId String
  person Person @relation(fields: [personId], references: [id])
}

model CollectionSchedule {
  id String @id @default(uuid())
  materialType String
  quantityKg String
  collectionStartTime String
  collectionEndTime String
  dayOfWeek String
  description String?
  image String?

  recyclerId String
  recycler Recycler @relation(fields: [recyclerId], references: [id])
}
